services:
  # Backend Utama
  api_main:
    build: ./cctv-main-backend
    ports:
      - "8080:8080"
    networks:
      - cctv_network
    depends_on:
      - db
      - rabbitmq
    environment:
      - FIREBASE_CREDENTIALS=/app/creds/service-account.json
      - PUSH_SERVICE_URL=http://push-service:8090
      - PUSH_SERVICE_SECRET=change-me-secret
      # Seed a superadmin on startup (change these for first run)
      - SUPERADMIN_EMAIL=superadmin@example.com
      - SUPERADMIN_PASSWORD=ChangeMe123!
      # URL publik untuk Mediamtx (untuk dibagikan ke App)
      - MEDIAMTX_PUBLIC_HOST=100.100.229.113
      - MEDIAMTX_PUBLIC_HLS_PORT=8888
      - MEDIAMTX_PUBLIC_RTSP_PORT=8554
      - MEDIAMTX_PUBLIC_WEBRTC_WS_PORT=8889
      # ---- S3/MinIO untuk presign rekaman panjang ----
      - MINIO_INTERNAL_ENDPOINT=http://minio:9000
      - MINIO_PUBLIC_ENDPOINT=http://127.0.0.1:9000
      - MINIO_PUBLIC_BASE_URL=http://127.0.0.1:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minio-secret-key
      - MINIO_USE_PRESIGN=true
      - ARCHIVE_BUCKET=video-archive
      - PRESIGN_TTL=600           # detik
      - SEGMENT_SECONDS=3600      # samakan dengan archiver
      - APP_TZ=Asia/Jakarta
    volumes:
      - ./secrets/firebase-service-account.json:/app/creds/service-account.json:ro

  # Backend Penerima
  api_ingestion:
    build: ./cctv-ingestion-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    volumes:
      - ingestion_uploads:/app/uploads
    networks: [cctv_network]
    depends_on: [rabbitmq, minio]
    environment:
      # endpoint internal = service name di compose
      - MINIO_INTERNAL_ENDPOINT=http://minio:9000
      # endpoint publik buat dibagikan ke UI (ubah ke domain/IP kamu kalau perlu)
      - MINIO_PUBLIC_ENDPOINT=http://127.0.0.1:9000
      - MINIO_PUBLIC_BASE_URL=http://127.0.0.1:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minio-secret-key
      - MINIO_BUCKET=video-clips
      - MINIO_USE_PRESIGN=true
      - MINIO_PRESIGN_TTL=86400
      # Rabbit URL (boleh biarkan default guest/guest)
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/

  # AI Worker
  ai_worker:
    build: ./cctv-ai-worker
    volumes:
      - ingestion_uploads:/app/uploads
      - ./cctv-ai-worker:/app
    networks:
      - cctv_network
    depends_on:
      - rabbitmq
      - api_main
    environment:
      - CUDA_VISIBLE_DEVICES=-1
      - KERAS_BACKEND=tensorflow
      - INFER_MODE=uniform            # <— samakan dengan training
      - ANOMALY_CLASS_INDEX=0       # anomaly di index 0 (training)
      - ANOMALY_THRESHOLD=0.65
      - ANOMALY_MIN_GAP=0
      - CONVERT_BGR2RGB=false         # training pakai BGR dari OpenCV
      - DEBUG_PRED=true
      # opsi sliding (abaikan jika uniform):
      - WINDOW_STRIDE=5
      - AGGREGATOR=mean
      - CONSECUTIVE_WINDOWS=0
      - DEBUG_SAVE_OVERLAY=true
      - DEBUG_SAVE_JSON=true


  # Database
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=cctv_db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - cctv_network

  # Antrian Tugas
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - cctv_network

  # Penyimpanan File
  minio:
    image: minio/minio:latest
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minio-secret-key
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - cctv_network

  mediamtx:
    image: bluenviron/mediamtx:latest
    container_name: mediamtx
    networks:
      - cctv_network
    ports:
      - "8554:8554"   # RTSP (TCP)
      - "1935:1935"   # RTMP (TCP)
      - "8888:8888"   # HLS/LL-HLS HTTP
      - "8889:8889"   # WebRTC signaling (WS)
      - "8189:8189/udp" # WebRTC media (UDP)
    volumes:
      - ./mediamtx.yml:/mediamtx.yml:ro
      - mediamtx_data:/data

  archiver_cam1:
    image: jrottenberg/ffmpeg:5.1-alpine
    restart: unless-stopped
    volumes:
      - recordings:/recordings
    networks: [cctv_network]
    command:
      - -hide_banner
      - -loglevel
      - info
      - -rtsp_transport
      - tcp
      - -i
      - rtsp://mediamtx:8554/cam1
      - -c
      - copy
      - -f
      - segment
      - -segment_time
      - "3600"   # 1 jam per segmen
      - -reset_timestamps
      - "1"
      - -strftime
      - "1"
      - /recordings/cam1_%Y%m%d_%H%M%S.mp4   # ← tidak pakai subfolder




  test_publisher_cam1:
    image: jrottenberg/ffmpeg:5.1-alpine
    restart: unless-stopped
    depends_on: [mediamtx]
    networks: [cctv_network]
    command:
      - -re
      - -f
      - lavfi
      - -i
      - testsrc=size=640x360:rate=25
      - -f
      - lavfi
      - -i
      - sine=frequency=1000:sample_rate=48000
      - -c:v
      - libx264
      - -preset
      - veryfast
      - -tune
      - zerolatency
      - -pix_fmt
      - yuv420p
      - -profile:v
      - main
      - -g
      - "50"
      - -c:a
      - aac
      - -b:a
      - 128k
      - -f
      - rtsp
      - -rtsp_transport
      - tcp
      - rtsp://mediamtx:8554/cam1
  # --- Mirror rekaman panjang ➜ MinIO setiap 30 detik ---
  archive_sync:
    image: bitnami/minio-client:latest
    restart: unless-stopped
    volumes:
      - recordings:/recordings
    environment:
      MINIO_ALIAS: minio
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minio-secret-key
    command: >
      /bin/bash -lc "
        /opt/bitnami/minio-client/bin/mc alias set ${MINIO_ALIAS} ${MINIO_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} &&
        /opt/bitnami/minio-client/bin/mc mb -p ${MINIO_ALIAS}/video-archive || true &&
        /opt/bitnami/minio-client/bin/mc mirror --overwrite --remove --watch /recordings ${MINIO_ALIAS}/video-archive
      "
    depends_on:
      - minio
    networks:
      - cctv_network


  recording_indexer:
    build: ./recording-indexer
    restart: unless-stopped
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minio-secret-key
      ARCHIVE_BUCKET: video-archive
      POSTGRES_DSN: host=db port=5432 user=admin password=secret dbname=cctv_db sslmode=disable
      SEGMENT_SECONDS: "3600"
      SCAN_INTERVAL_SEC: "30"
      INDEXER_HTTP_ADDR: ":8091"
    depends_on:
      - db
      - minio
    networks:
      - cctv_network
    ports:
      - "8091:8091"

  push-service:
    build: ./cctv-push-service
    ports:
      - "8090:8090"
    networks:
      - cctv_network
    environment:
      - FIREBASE_CREDENTIALS=/app/creds/service-account.json
      - PUSH_SERVICE_SECRET=change-me-secret
    volumes:
      - ./secrets/firebase-service-account.json:/app/creds/service-account.json:ro

  app_admin_dashboard:
    build: ./admin-dashboard
    ports:
      - "3000:3000"
    networks:
      - cctv_network
    depends_on:
      - api_main
    environment:
      - API_BASE_URL=http://api_main:8080
      - UPLOAD_BASE_URL=http://api_ingestion:8081
      - NEXT_PUBLIC_API_BASE_URL=http://127.0.0.1:8080

  archiver_manager:
    image: jrottenberg/ffmpeg:5.1-alpine
    restart: unless-stopped
    networks: [cctv_network]
    volumes:
      - recordings:/recordings
      - ./scripts:/app:ro
    environment:
      - SEGMENT_SECONDS=3600
      - CAMERA_LIST=cam1=rtsp://mediamtx:8554/cam1,cam2=rtsp://mediamtx:8554/cam2
    # Override ffmpeg entrypoint so our shell script runs properly
    entrypoint: ["/bin/sh", "/app/archiver_manager.sh"]


# Definisikan network dan volume
networks:
  cctv_network:

volumes:
  db_data:
  rabbitmq_data:
  minio_data:
  ingestion_uploads:
  mediamtx_data:
  recordings:
