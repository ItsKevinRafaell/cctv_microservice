  echo "[seed] Upsert FCM token for $NEW_USER_EMAIL"  curl_json POST "$API_BASE/api/users/fcm-token" "$(printf '{"fcm_token":"%s"}' "$FCM_TOKEN")" "Authorization: Bearer $USER_TOKEN"  echo "[seed] FCM upsert status: $code"fi# 3) Create camera in companyecho "[seed] Create camera stream_key=$STREAM_KEY for company=$COMPANY_ID..."create_cam_body=$(printf '{"name":"%s","location":"%s","stream_key":"%s","company_id":%s}' "Demo Cam $STREAM_KEY" "Demo" "$STREAM_KEY" "$COMPANY_ID")curl_json POST "$API_BASE/api/cameras" "$create_cam_body" "$AUTH_H"CAM_ID=$(extract_json_number camera_id "$body")if [[ -z "$CAM_ID" ]]; then  echo "[seed] Create returned $code; try resolving camera id from list..."  curl_json GET "$API_BASE/api/cameras?company_id=$COMPANY_ID" "" "$AUTH_H"  # Try: id before stream_key  CAM_ID=$(sed -n "s/.*\"id\"[[:space:]]*:[[:space:]]*\([0-9]\+\)[^}]*\"stream_key\"[[:space:]]*:[[:space:]]*\"${STREAM_KEY}\".*/\1/p" <<<"$body")  if [[ -z "$CAM_ID" ]]; then    # Try: stream_key before id    CAM_ID=$(sed -n "s/.*\"stream_key\"[[:space:]]*:[[:space:]]*\"${STREAM_KEY}\"[^}]*\"id\"[[:space:]]*:[[:space:]]*\([0-9]\+\).*/\1/p" <<<"$body")  fifi[[ -z "$CAM_ID" ]] && { echo "[seed] Failed to obtain camera id"; exit 1; }echo "[seed] Camera id=$CAM_ID"# 4) Report anomalyecho "[seed] Report anomaly for camera_id=$CAM_ID ..."anom_body=$(printf '{"camera_id":%s,"anomaly_type":"%s","confidence":%s,"reported_at":"%s"%s}' \  "$CAM_ID" "intrusion" "0.9" "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \  "$( [[ -n "$CLIP_PATH" ]] && printf ',"video_clip_url":"%s"' "$CLIP_PATH" || printf '' )" )extra_header=()[[ -n "$WORKER_SHARED_TOKEN" ]] && extra_header+=("X-Worker-Token: $WORKER_SHARED_TOKEN")curl_json POST "$API_BASE/api/report-anomaly" "$anom_body" "${extra_header[@]}"echo "[seed] anomaly status: $code"echoecho "Next steps:"echo "  1) Login on the app as: $NEW_USER_EMAIL / $NEW_USER_PASSWORD"echo "  2) Home â†’ Recent Alerts should show the anomaly; open detail to play clip if $CLIP_PATH exists in MinIO."echo "  3) To start a dummy live stream to $STREAM_KEY:"echo "     docker compose exec -d ffmpeg_rtsp_cam1 sh -lc 'ffmpeg -re -f lavfi -i testsrc=size=640x360:rate=25 -f lavfi -i sine=frequency=1000:sample_rate=48000 -c:v libx264 -preset veryfast -tune zerolatency -pix_fmt yuv420p -profile:v main -g 50 -c:a aac -b:a 128k -f rtsp -rtsp_transport tcp rtsp://mediamtx:8554/$STREAM_KEY'"echo "  4) Watch push logs: docker compose logs -f push-service"